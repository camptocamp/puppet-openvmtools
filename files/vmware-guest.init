#!/bin/sh

### BEGIN INIT INFO
# Provides:		open-vm-tools
# Required-Start:	$local_fs
# Required-Stop:	$local_fs
# X-Start-Before:	$network
# X-Stop-After:		$network
# Default-Start:	S
# Default-Stop:		0 6
# Description:		Runs the open-vm-tools services
# Short-Description:	Runs the open-vm-tools services
### END INIT INFO

. /lib/lsb/init-functions

vmxnet_needed ()
{
	HWVERSION="$(vmware-checkvm -h | head -1 | cut -f5 -d\ )"

	for DEVICE in /sys/bus/pci/devices/*
	do
		if grep -q 15ad ${DEVICE}/vendor && grep -q 0720 ${DEVICE}/device
		then
			return 0
		fi

		if [ "${HWVERSION}" -ge "4" ] && grep -q 1022 ${DEVICE}/vendor && grep -q 2000 ${DEVICE}/device
		then
			return 0
		fi
	done

	return 1
}

vmxnet_found ()
{
	if modprobe -n -q vmxnet
	then
		return 0
	fi

	return 1
}

exit_if_not_in_vm () {
	if [ ! -x /usr/bin/vmware-checkvm ] || ! /usr/bin/vmware-checkvm > /dev/null 2>&1
	then
		echo "Not starting as we're not running in a vm."
		exit 0
	fi
}

case "${1}" in
	start)
		# Check if we're running inside VMWare
		exit_if_not_in_vm

		log_daemon_msg "Loading open-vm-tools modules"
		log_progress_msg "vmhgfs"; modprobe vmhgfs
		log_progress_msg "vmmemctl"; modprobe vmmemctl
		log_progress_msg "vmsync"; modprobe vmsync
		log_end_msg 0

		if vmxnet_found && vmxnet_needed
		then
			modprobe -r pcnet32
			modprobe vmxnet
		fi

		log_daemon_msg "Starting open-vm guest daemon" "vmware-guestd"
		vmware-guestd --background /var/run/vmware-guestd.pid
		log_end_msg 0
		;;

	stop)
		# Check if we're running inside VMWare
		exit_if_not_in_vm

		log_daemon_msg "Stopping open-vm guest daemon" "vmware-guestd"

		if [ -f /var/run/vmware-guestd.pid ]
		then
			kill $(cat /var/run/vmware-guestd.pid)
		fi

		log_end_msg 0

		if vmxnet_found && vmxnet_needed
		then
			modprobe -r vmxnet
			modprobe pcnet32
		fi

		log_daemon_msg "Removing open-vm-tools modules"
		log_progress_msg "vmhgfs"; modprobe -r vmhgfs
		log_progress_msg "vmmemctl"; modprobe -r vmmemctl
		log_progress_msg "vmsync"; modprobe -r vmsync
		log_end_msg 0
		;;

	force-reload|restart)
		${0} stop; ${0} start
		;;

	*)
		log_success_msg "Usage: ${0} {start|stop|restart|force-reload}"
		exit 1
		;;
esac
